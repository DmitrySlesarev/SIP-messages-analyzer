""" This is SIP Signalling analyzer by FT-RU. All rights are reserved """

print ("""This script analyzes content of Session Initiation Protocol in accordance with RFC's:
			3265, 3853, 4320, 4916, 5393, 5621,
            \t\t5626, 5630, 5922, 5954, 6026, 6141,                         
            \t\t6665, 6878, 7462, 7463, 8217, 8591""")

import re
from sys import argv
from os.path import exists

def start(func):
	print("="*20)
	print(func.upper())
	print("="*20)

def finish():
	print("-"*20)
	print("FINISHED\n")

def processing_file(name_of_file):
	with open(name_of_file, "r+") as f:
			message = str(f.read())
			return message

"""
try:
	script, filename = argv
	if filename.exists():
		processing_file(filename)
		print(message)
	else:
		pass
"""

while True:
	try:
		print("Type the name of .txt(!) file with single(!) SIP message to analyse:")
		name_of_file = str(input("> "))
		message = processing_file(name_of_file)
		start("STARTING ANALYSIS")
		print(message)
		break
	except NameError as ex:
		print("Caught the EOF error:{0}".format(ex))
		print("Let's try again.")		
		continue
	except EOFError as ex:
		print("Caught the EOF error:{0}".format(ex))
		print("Let's try again.")
		continue
	except IOError as ex:
		print("Caught the I/O error:{0}".format(ex))
		print("Let's try again.")
		continue	

#unittest
'''
print(len(message))
assert len(message) > 0, "The message is empty"
assert message == None, "There should be a value"'''



'''
# for OOP version
print("Type the name of .txt(!) file with single(!) SIP message to analyse:")
name_of_file = str(input("> "))


if __name__ == "__main__":
    start = Headers(name_of_file)
'''

headers_list = {
	'via' : 'Via',
	'max_forwards' : 'Max-Forwards',
	'to' : 'To',
	'from' : 'From',
	'call_id' : 'Call-ID',
	'cseq' : 'CSeq',
}

headers_invite = headers_list.copy()
headers_invite['contact'] = 'Contact'

start("Headres check:")
if re.search('INVITE', message):
	for key in headers_invite:
		if re.search(headers_invite[key], message):
			print(key.upper(), True)
		else:
			print(headers_invite[key].upper(), False)	
else:
	for key in headers_list:
		if re.search(headers_list[key], message):
			print(key.upper(), True)
		else:
			print(headers_list[key], False)
finish()


client_errors = {
	'bad_request' : '(400)',
	'unathorized' : '(401)',
	'forbidden' : '(403)',
	'not_found' : '(404)',
	'proxy_authentication_required' : '(407)',
	'request_timeout' : '(408)',
	'temporary_unavailable' : '(480)',
	'call_or_transaction_does_not_exist' : '(481)',
	'busy_here' : '(486)',
	'request_terminated' : '(487)',
	}

start("Errors of Client:")
for key in client_errors:
		if re.search(client_errors[key], message):
			print(key.upper(), True)
		else:
			print(client_errors[key].upper(), False)
finish()


server_errors = {
	'bad_gateway' : '(502)',
 	'service_unavailable' : '(503)',
	}

start("Server errors:")
for key in server_errors:
	if re.search(server_errors[key], message):
		print(key.upper(), True)
	else:
		print(server_errors[key].upper(), False)
finish()


global_errors = {
	'busy_everywhere' : '(600)', 
	'decline' : '(603)',
}

start("Global errors:")
for key in global_errors:
	if re.search(global_errors[key], message):
		print(key.upper(), True)
	else:
		print(global_errors[key].upper(), False)	
finish()

#phone context check
start("Phone context check:")

phone_context = [
	'.i-wlan.ims.mnc',
	]
for i in phone_context:
	if i in message:
		print("""In accordance with Megafon NW requirements, the FQDN cannot have WiFi MAC address & i-wlan string.\n
			PROHIBITED:\n
INVITE sip:89262000099;phone-context=d460e3ed8420.i-wlan.ims.mnc002.mcc250.3gppnetwork.org@ims.mnc002.mcc250.3gppnetwork.org;user=phone SIP/2.0\n
REQUIRED:\n
phone-context=ims.mnc002.mcc250.3gppnetwork.org@ims.mnc002.mcc250.3gppnetwork.org\n
Please, comply.""")
	else:
		print("Phone context matches the requirements")
finish()

start("Crosscheck:")
print('Complies RFC 3261') if re.search('z9hG4bK', message) else print('Doesn\'t comply RFC 3261')
print('GEO PIDF is present') if re.search('<gml:pos>', message) else print('Doesn\'t comply AOSA')
print('EVS is allowed') if re.search('EVS', message) else print('No EVS codec')
print('SDP is checked') if re.search('sendrecv', message) else print('Check SDP: no bilateral voice')
print('P-Early-Media:supported') if re.search('P-Early-Media: supported', message) else print('P-Early-Media: NOT supported')
print('P-Access-Network-Info: IEEE-802.11') if re.search('P-Access-Network-Info: IEEE-802.11', message) else print('No VoWiFi PANI')
print('Cellular-Network-Info: 3GPP-E-UTRAN') if re.search('Cellular-Network-Info: 3GPP-E-UTRAN', message) else print('No CNI for VoWiFi')
finish()
